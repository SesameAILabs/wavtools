(()=>{var d=class{static floatTo16BitPCM(e){let s=new ArrayBuffer(e.length*2),t=new DataView(s),a=0;for(let r=0;r<e.length;r++,a+=2){let n=Math.max(-1,Math.min(1,e[r]));t.setInt16(a,n<0?n*32768:n*32767,!0)}return s}static mergeBuffers(e,s){let t=new Uint8Array(e.byteLength+s.byteLength);return t.set(new Uint8Array(e),0),t.set(new Uint8Array(s),e.byteLength),t.buffer}_packData(e,s){return[new Uint8Array([s,s>>8]),new Uint8Array([s,s>>8,s>>16,s>>24])][e]}pack(e,s){if(s?.bitsPerSample)if(s?.channels){if(!s?.data)throw new Error('Missing "data"')}else throw new Error('Missing "channels"');else throw new Error('Missing "bitsPerSample"');let{bitsPerSample:t,channels:a,data:r}=s,n=["RIFF",this._packData(1,52),"WAVE","fmt ",this._packData(1,16),this._packData(0,1),this._packData(0,a.length),this._packData(1,e),this._packData(1,e*a.length*t/8),this._packData(0,a.length*t/8),this._packData(0,t),"data",this._packData(1,a[0].length*a.length*t/8),r],i=new Blob(n,{type:"audio/mpeg"}),c=URL.createObjectURL(i);return{blob:i,url:c,channelCount:a.length,sampleRate:e,duration:r.byteLength/(a.length*e*2)}}};globalThis.WavPacker=d;var C=[4186.01,4434.92,4698.63,4978.03,5274.04,5587.65,5919.91,6271.93,6644.88,7040,7458.62,7902.13],L=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],m=[],A=[];for(let h=1;h<=8;h++)for(let e=0;e<C.length;e++){let s=C[e];m.push(s/Math.pow(2,8-h)),A.push(L[e]+h)}var v=[32,2e3],I=m.filter((h,e)=>m[e]>v[0]&&m[e]<v[1]),D=A.filter((h,e)=>m[e]>v[0]&&m[e]<v[1]);var g=class h{static getFrequencies(e,s,t,a="frequency",r=-100,n=-30){t||(t=new Float32Array(e.frequencyBinCount),e.getFloatFrequencyData(t));let i=s/2,c=1/t.length*i,u,o,l;if(a==="music"||a==="voice"){let p=a==="voice"?I:m,f=Array(p.length).fill(r);for(let b=0;b<t.length;b++){let P=b*c,F=t[b];for(let w=p.length-1;w>=0;w--)if(P>p[w]){f[w]=Math.max(f[w],F);break}}u=f,o=a==="voice"?I:m,l=a==="voice"?D:A}else u=Array.from(t),o=u.map((p,f)=>c*f),l=o.map(p=>`${p.toFixed(2)} Hz`);let y=u.map(p=>Math.max(0,Math.min((p-r)/(n-r),1)));return{values:new Float32Array(y),frequencies:o,labels:l}}constructor(e,s=null){if(this.fftResults=[],s){let{length:t,sampleRate:a}=s,r=new OfflineAudioContext({length:t,sampleRate:a}),n=r.createBufferSource();n.buffer=s;let i=r.createAnalyser();i.fftSize=8192,i.smoothingTimeConstant=.1,n.connect(i);let c=1/60,u=t/a,o=l=>{let y=c*l;y<u&&r.suspend(y).then(()=>{let k=new Float32Array(i.frequencyBinCount);i.getFloatFrequencyData(k),this.fftResults.push(k),o(l+1)}),l===1?r.startRendering():r.resume()};n.start(0),o(1),this.audio=e,this.context=r,this.analyser=i,this.sampleRate=a,this.audioBuffer=s}else{let t=new AudioContext,a=t.createMediaElementSource(e),r=t.createAnalyser();r.fftSize=8192,r.smoothingTimeConstant=.1,a.connect(r),r.connect(t.destination),this.audio=e,this.context=t,this.analyser=r,this.sampleRate=this.context.sampleRate,this.audioBuffer=null}}getFrequencies(e="frequency",s=-100,t=-30){let a=null;if(this.audioBuffer&&this.fftResults.length){let r=this.audio.currentTime/this.audio.duration,n=Math.min(r*this.fftResults.length|0,this.fftResults.length-1);a=this.fftResults[n]}return h.getFrequencies(this.analyser,this.sampleRate,a,e,s,t)}async resumeIfSuspended(){return this.context.state==="suspended"&&await this.context.resume(),!0}};globalThis.AudioAnalysis=g;var _=`
class StreamProcessor extends AudioWorkletProcessor {
  constructor() {
    super();
    this.hasStarted = false;
    this.hasInterrupted = false;
    this.outputBuffers = [];
    this.bufferLength = 128;
    this.write = { buffer: new Float32Array(this.bufferLength), trackId: null, playbackRate: 1 };
    this.writeOffset = 0;

    this.playbackMinBuffers = 0;
    this.playbackRate = 1;
    this.playbackSmoothing = 0;
    this.playbackSkipDigitalSilence = false;
    
    this.isInPlayback = false;
    this.trackSampleOffsets = {};
    this.port.onmessage = (event) => {
      if (event.data) {
        const payload = event.data;
        if (payload.event === 'write') {
          const int16Array = payload.buffer;
          const float32Array = new Float32Array(int16Array.length);
          for (let i = 0; i < int16Array.length; i++) {
            float32Array[i] = int16Array[i] / 0x8000; // Convert Int16 to Float32
          }
          this.writeData(float32Array, payload.trackId);
        } else if (
          payload.event === 'offset' ||
          payload.event === 'interrupt'
        ) {
          const requestId = payload.requestId;
          const trackId = this.write.trackId;
          const offset = this.trackSampleOffsets[trackId] || 0;
          this.port.postMessage({
            event: 'offset',
            requestId,
            trackId,
            offset,
          });
          if (payload.event === 'interrupt') {
            this.hasInterrupted = true;
          }
        } else if (payload.event === 'configure') {
          this.playbackMinBuffers = payload.playbackMinBuffers;
          this.playbackRate = payload.playbackRate;
          this.playbackSmoothing = payload.playbackSmoothing;
          this.playbackSkipDigitalSilence = payload.playbackSkipDigitalSilence;
        } else {
          throw new Error(\`Unhandled event "\${payload.event}"\`);
        }
      }
    };
  }

  writeData(float32Array, trackId = null) {
    let { buffer, playbackRate } = this.write;
    let offset = this.writeOffset;

    // Apply playback rate by resampling into a new buffer
    const resampledLength = Math.floor(float32Array.length / playbackRate);
    const resampledArray = new Float32Array(resampledLength);

    for (let i = 0; i < resampledLength; ++i) {
      const originalIndex = i * playbackRate;
      const start = Math.floor(originalIndex);
      const end = Math.ceil(originalIndex);
      
      if (start === end || end >= float32Array.length) {
        // If the start and end are the same or out of bounds, just use the start value
        resampledArray[i] = float32Array[start];
      } else {
        // Linear interpolation between two samples
        const ratio = originalIndex - start;
        resampledArray[i] = float32Array[start] * (1 - ratio) + float32Array[end] * ratio;
      }
    }

    // Apply a simple moving average to smooth the entire buffer
    if (this.playbackSmoothing > 0 && playbackRate !== 1) {
      for (let i = 0; i < resampledLength; ++i) {
        let sum = 0;
        let count = 0;
        
        // Sum over the window
        for (let j = -smoothingWindow; j <= smoothingWindow; ++j) {
          const idx = i + j;
          if (idx >= 0 && idx < resampledLength) {
            sum += resampledArray[idx];
            count++;
          }
        }

        // Calculate the average
        resampledArray[i] = sum / count;
      }
  }

    // Writing the resampled data to the buffer
    for (let i = 0; i < resampledArray.length; i++) {
      buffer[offset++] = resampledArray[i];
      if (offset >= buffer.length) {
        this.outputBuffers.push(this.write);
        this.write = { buffer: new Float32Array(this.bufferLength), trackId, playbackRate: this.playbackRate };
        buffer = this.write.buffer;
        playbackRate = this.write.playbackRate;
        offset = 0;
      }
    }
    this.writeOffset = offset;
    return true;
  }

  process(inputs, outputs, parameters) {
    const output = outputs[0];
    const outputChannelData = output[0];
    const outputBuffers = this.outputBuffers;
    if (this.hasInterrupted) {
      this.port.postMessage({ event: 'stop' });
      return false;
    } else {
      let samplesMoved = 0;
      let wroteSamples = false;

      while (outputBuffers.length > 0) {
        this.hasStarted = true;

        const { buffer, trackId, playbackRate } = outputBuffers[0];

        // See if this buffer is digital silence. If it is, we skip it entirely.
        let isDigitalSilence = this.playbackSkipDigitalSilence;
        for (let i = 0; i < buffer.length; i++) {
          if (buffer[i] !== 0) {
            isDigitalSilence = false;
            break;
          }
        }

        // If it's not digital silence, we still may not play it.
        const blockedForPlayback = !this.isInPlayback && outputBuffers.length < this.playbackMinBuffers;
        if (!isDigitalSilence && blockedForPlayback) {
          break;
        }

        // Otherwise, we're going to consume this buffer.
        samplesMoved += buffer.length * playbackRate;
        outputBuffers.shift();

        // If it's not digital silence, we write.
        if (!isDigitalSilence) {
          for (let i = 0; i < outputChannelData.length; i++) {
            outputChannelData[i] = buffer[i] || 0;
          }

          wroteSamples = true;
        } 

        if (trackId) {
          this.trackSampleOffsets[trackId] =
            this.trackSampleOffsets[trackId] || 0;
          this.trackSampleOffsets[trackId] += buffer.length;
        }

        // If we wrote samples, we're done.
        if (wroteSamples) {
          break;
        }
      }

      // post audio playback timestamp
      if (samplesMoved > 0) {
        this.port.postMessage({
          event: 'audio',
          data: samplesMoved,
          timestamp_ms: Date.now(),
        });
      } 

      if (wroteSamples) {
        this.isInPlayback = true;
      } else {
        this.isInPlayback = false;
      }
      
      return true;
    }
  }
}

registerProcessor('stream_processor', StreamProcessor);
`,q=new Blob([_],{type:"application/javascript"}),E=URL.createObjectURL(q),R=E;var S=class{constructor({sampleRate:e=44100}={}){this.scriptSrc=R,this.sampleRate=e,this.context=null,this.stream=null,this.analyser=null,this.trackSampleOffsets={},this.interruptedTrackIds={},this._audioProcessor=()=>{}}async connect(e){this.context=new AudioContext({sampleRate:this.sampleRate}),this._audioProcessor=e,this.context.state==="suspended"&&await this.context.resume();try{await this.context.audioWorklet.addModule(this.scriptSrc)}catch(t){throw console.error(t),new Error(`Could not add audioWorklet module: ${this.scriptSrc}`)}let s=this.context.createAnalyser();return s.fftSize=8192,s.smoothingTimeConstant=.1,this.analyser=s,!0}getFrequencies(e="frequency",s=-100,t=-30){if(!this.analyser)throw new Error("Not connected, please call .connect() first");return g.getFrequencies(this.analyser,this.sampleRate,null,e,s,t)}_start(){let e=new AudioWorkletNode(this.context,"stream_processor");return e.connect(this.context.destination),e.port.onmessage=s=>{let{event:t,data:a,timestamp_ms:r}=s.data;if(t==="audio")this._audioProcessor(a,r);else if(t==="stop")e.disconnect(),this.stream=null;else if(t==="offset"){let{requestId:n,trackId:i,offset:c}=s.data,u=c/this.sampleRate;this.trackSampleOffsets[n]={trackId:i,offset:c,currentTime:u}}},this.analyser.disconnect(),e.connect(this.analyser),this.stream=e,!0}configure(e={playbackMinBuffers:0,playbackRate:1,playbackSmoothing:0,playbackSkipDigitalSilence:!1}){this.stream.port.postMessage({event:"configure",...e})}add16BitPCM(e,s="default"){if(typeof s!="string")throw new Error("trackId must be a string");if(this.interruptedTrackIds[s])return;this.stream||this._start();let t;if(e instanceof Int16Array)t=e;else if(e instanceof ArrayBuffer)t=new Int16Array(e);else throw new Error("argument must be Int16Array or ArrayBuffer");return this.stream.port.postMessage({event:"write",buffer:t,trackId:s}),t}async getTrackSampleOffset(e=!1){if(!this.stream)return null;let s=crypto.randomUUID();this.stream.port.postMessage({event:e?"interrupt":"offset",requestId:s});let t;for(;!t;)t=this.trackSampleOffsets[s],await new Promise(r=>setTimeout(()=>r(),1));let{trackId:a}=t;return e&&a&&(this.interruptedTrackIds[a]=!0),t}async interrupt(){return this.getTrackSampleOffset(!0)}};globalThis.WavStreamPlayer=S;var B=`
class AudioProcessor extends AudioWorkletProcessor {

  constructor() {
    super();
    this.port.onmessage = this.receive.bind(this);
    this.initialize();
  }

  initialize() {
    this.foundAudio = false;
    this.recording = false;
    this.chunks = [];
  }

  /**
   * Concatenates sampled chunks into channels
   * Format is chunk[Left[], Right[]]
   */
  readChannelData(chunks, channel = -1, maxChannels = 9) {
    let channelLimit;
    if (channel !== -1) {
      if (chunks[0] && chunks[0].length - 1 < channel) {
        throw new Error(
          \`Channel \${channel} out of range: max \${chunks[0].length}\`
        );
      }
      channelLimit = channel + 1;
    } else {
      channel = 0;
      channelLimit = Math.min(chunks[0] ? chunks[0].length : 1, maxChannels);
    }
    const channels = [];
    for (let n = channel; n < channelLimit; n++) {
      const length = chunks.reduce((sum, chunk) => {
        return sum + chunk[n].length;
      }, 0);
      const buffers = chunks.map((chunk) => chunk[n]);
      const result = new Float32Array(length);
      let offset = 0;
      for (let i = 0; i < buffers.length; i++) {
        result.set(buffers[i], offset);
        offset += buffers[i].length;
      }
      channels[n] = result;
    }
    return channels;
  }

  /**
   * Combines parallel audio data into correct format,
   * channels[Left[], Right[]] to float32Array[LRLRLRLR...]
   */
  formatAudioData(channels) {
    if (channels.length === 1) {
      // Simple case is only one channel
      const float32Array = channels[0].slice();
      const meanValues = channels[0].slice();
      return { float32Array, meanValues };
    } else {
      const float32Array = new Float32Array(
        channels[0].length * channels.length
      );
      const meanValues = new Float32Array(channels[0].length);
      for (let i = 0; i < channels[0].length; i++) {
        const offset = i * channels.length;
        let meanValue = 0;
        for (let n = 0; n < channels.length; n++) {
          float32Array[offset + n] = channels[n][i];
          meanValue += channels[n][i];
        }
        meanValues[i] = meanValue / channels.length;
      }
      return { float32Array, meanValues };
    }
  }

  /**
   * Converts 32-bit float data to 16-bit integers
   */
  floatTo16BitPCM(float32Array) {
    const buffer = new ArrayBuffer(float32Array.length * 2);
    const view = new DataView(buffer);
    let offset = 0;
    for (let i = 0; i < float32Array.length; i++, offset += 2) {
      let s = Math.max(-1, Math.min(1, float32Array[i]));
      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);
    }
    return buffer;
  }

  /**
   * Retrieves the most recent amplitude values from the audio stream
   * @param {number} channel
   */
  getValues(channel = -1) {
    const channels = this.readChannelData(this.chunks, channel);
    const { meanValues } = this.formatAudioData(channels);
    return { meanValues, channels };
  }

  /**
   * Exports chunks as an audio/wav file
   */
  export() {
    const channels = this.readChannelData(this.chunks);
    const { float32Array, meanValues } = this.formatAudioData(channels);
    const audioData = this.floatTo16BitPCM(float32Array);
    return {
      meanValues: meanValues,
      audio: {
        bitsPerSample: 16,
        channels: channels,
        data: audioData,
      },
    };
  }

  receive(e) {
    const { event, id } = e.data;
    let receiptData = {};
    switch (event) {
      case 'start':
        this.recording = true;
        break;
      case 'stop':
        this.recording = false;
        break;
      case 'clear':
        this.initialize();
        break;
      case 'export':
        receiptData = this.export();
        break;
      case 'read':
        receiptData = this.getValues();
        break;
      default:
        break;
    }
    // Always send back receipt
    this.port.postMessage({ event: 'receipt', id, data: receiptData });
  }

  sendChunk(chunk) {
    const timestamp_ms = Date.now();
    const channels = this.readChannelData([chunk]);
    const { float32Array, meanValues } = this.formatAudioData(channels);
    const rawAudioData = this.floatTo16BitPCM(float32Array);
    const monoAudioData = this.floatTo16BitPCM(meanValues);
    this.port.postMessage({
      event: 'chunk',
      data: {
        mono: monoAudioData,
        raw: rawAudioData,
      },
      timestamp_ms,
    });
  }

  process(inputList, outputList, parameters) {    
    // Copy input to output (e.g. speakers)
    // Note that this creates choppy sounds with Mac products
    const sourceLimit = Math.min(inputList.length, outputList.length);
    for (let inputNum = 0; inputNum < sourceLimit; inputNum++) {
      const input = inputList[inputNum];
      const output = outputList[inputNum];
      const channelCount = Math.min(input.length, output.length);
      for (let channelNum = 0; channelNum < channelCount; channelNum++) {
        input[channelNum].forEach((sample, i) => {
          output[channelNum][i] = sample;
        });
      }
    }
    const inputs = inputList[0];
    // There's latency at the beginning of a stream before recording starts
    // Make sure we actually receive audio data before we start storing chunks
    let sliceIndex = 0;
    if (!this.foundAudio) {
      for (const channel of inputs) {
        sliceIndex = 0; // reset for each channel
        if (this.foundAudio) {
          break;
        }
        if (channel) {
          for (const value of channel) {
            if (value !== 0) {
              // find only one non-zero entry in any channel
              this.foundAudio = true;
              break;
            } else {
              sliceIndex++;
            }
          }
        }
      }
    }
    if (inputs && inputs[0] && this.foundAudio && this.recording) {
      // We need to copy the TypedArray, because the \`process\`
      // internals will reuse the same buffer to hold each input
      const chunk = inputs.map((input) => input.slice(sliceIndex));
      this.chunks.push(chunk);
      this.sendChunk(chunk);
    }
    return true;
  }
}

registerProcessor('audio_processor', AudioProcessor);
`,T=new Blob([B],{type:"application/javascript"}),O=URL.createObjectURL(T),M=O;var x=class{constructor({sampleRate:e=44100,outputToSpeakers:s=!1,debug:t=!1}={}){this.scriptSrc=M,this.sampleRate=e,this.outputToSpeakers=s,this.debug=!!t,this._deviceChangeCallback=null,this._devices=[],this.stream=null,this.processor=null,this.source=null,this.node=null,this.recording=!1,this._lastEventId=0,this.eventReceipts={},this.eventTimeout=5e3,this._chunkProcessor=()=>{},this._chunkProcessorSize=void 0,this._chunkProcessorBuffer={raw:new ArrayBuffer(0),mono:new ArrayBuffer(0)}}static async decode(e,s=44100,t=-1){let a=new AudioContext({sampleRate:s}),r,n;if(e instanceof Blob){if(t!==-1)throw new Error('Can not specify "fromSampleRate" when reading from Blob');n=e,r=await n.arrayBuffer()}else if(e instanceof ArrayBuffer){if(t!==-1)throw new Error('Can not specify "fromSampleRate" when reading from ArrayBuffer');r=e,n=new Blob([r],{type:"audio/wav"})}else{let o,l;if(e instanceof Int16Array){l=e,o=new Float32Array(e.length);for(let f=0;f<e.length;f++)o[f]=e[f]/32768}else if(e instanceof Float32Array)o=e;else if(e instanceof Array)o=new Float32Array(e);else throw new Error('"audioData" must be one of: Blob, Float32Arrray, Int16Array, ArrayBuffer, Array<number>');if(t===-1)throw new Error('Must specify "fromSampleRate" when reading from Float32Array, In16Array or Array');if(t<3e3)throw new Error('Minimum "fromSampleRate" is 3000 (3kHz)');l||(l=d.floatTo16BitPCM(o));let y={bitsPerSample:16,channels:[o],data:l};n=new d().pack(t,y).blob,r=await n.arrayBuffer()}let i=await a.decodeAudioData(r),c=i.getChannelData(0),u=URL.createObjectURL(n);return{blob:n,url:u,values:c,audioBuffer:i}}log(){return this.debug&&this.log(...arguments),!0}getSampleRate(){return this.sampleRate}getStatus(){return this.processor?this.recording?"recording":"paused":"ended"}async _event(e,s={},t=null){if(t=t||this.processor,!t)throw new Error("Can not send events without recording first");let a={event:e,id:this._lastEventId++,data:s};t.port.postMessage(a);let r=new Date().valueOf();for(;!this.eventReceipts[a.id];){if(new Date().valueOf()-r>this.eventTimeout)throw new Error(`Timeout waiting for "${e}" event`);await new Promise(i=>setTimeout(()=>i(!0),1))}let n=this.eventReceipts[a.id];return delete this.eventReceipts[a.id],n}listenForDeviceChange(e){if(e===null&&this._deviceChangeCallback)navigator.mediaDevices.removeEventListener("devicechange",this._deviceChangeCallback),this._deviceChangeCallback=null;else if(e!==null){let s=0,t=[],a=n=>n.map(i=>i.deviceId).sort().join(","),r=async()=>{let n=++s,i=await this.listDevices();n===s&&a(t)!==a(i)&&(t=i,e(i.slice()))};navigator.mediaDevices.addEventListener("devicechange",r),r(),this._deviceChangeCallback=r}return!0}async requestPermission(){let e=await navigator.permissions.query({name:"microphone"});if(e.state==="denied")window.alert("You must grant microphone access to use this feature.");else if(e.state==="prompt")try{(await navigator.mediaDevices.getUserMedia({audio:!0})).getTracks().forEach(a=>a.stop())}catch{window.alert("You must grant microphone access to use this feature.")}return!0}async listDevices(){if(!navigator.mediaDevices||!("enumerateDevices"in navigator.mediaDevices))throw new Error("Could not request user devices");await this.requestPermission();let s=(await navigator.mediaDevices.enumerateDevices()).filter(r=>r.kind==="audioinput"),t=s.findIndex(r=>r.deviceId==="default"),a=[];if(t!==-1){let r=s.splice(t,1)[0],n=s.findIndex(i=>i.groupId===r.groupId);n!==-1&&(r=s.splice(n,1)[0]),r.default=!0,a.push(r)}return a.concat(s)}async begin(e){if(this.processor)throw new Error("Already connected: please call .end() to start a new session");if(!navigator.mediaDevices||!("getUserMedia"in navigator.mediaDevices))throw new Error("Could not request user media");try{let i={audio:!0};e&&(i.audio={deviceId:{exact:e}}),this.stream=await navigator.mediaDevices.getUserMedia(i)}catch{throw new Error("Could not start media stream")}let s=new AudioContext({sampleRate:this.sampleRate}),t=s.createMediaStreamSource(this.stream);try{await s.audioWorklet.addModule(this.scriptSrc)}catch(i){throw console.error(i),new Error(`Could not add audioWorklet module: ${this.scriptSrc}`)}let a=new AudioWorkletNode(s,"audio_processor");a.port.onmessage=i=>{let{event:c,id:u,data:o,timestamp_ms:l}=i.data;if(c==="receipt")this.eventReceipts[u]=o;else if(c==="chunk"){if(this._chunkProcessorSize)throw new Error("deprecated - chunkSize must be 0 - do not use buffering");this._chunkProcessor(o,l)}};let r=t.connect(a),n=s.createAnalyser();return n.fftSize=8192,n.smoothingTimeConstant=.1,r.connect(n),this.outputToSpeakers&&(console.warn(`Warning: Output to speakers may affect sound quality,
especially due to system audio feedback preventative measures.
use only for debugging`),n.connect(s.destination)),this.source=t,this.node=r,this.analyser=n,this.processor=a,!0}getFrequencies(e="frequency",s=-100,t=-30){if(!this.processor)throw new Error("Session ended: please call .begin() first");return g.getFrequencies(this.analyser,this.sampleRate,null,e,s,t)}async pause(){if(this.processor){if(!this.recording)throw new Error("Already paused: please call .record() first")}else throw new Error("Session ended: please call .begin() first");return this.log("Pausing ..."),await this._event("stop"),this.recording=!1,!0}async record(e=()=>{}){if(this.processor){if(this.recording)throw new Error("Already recording: please call .pause() first");if(typeof e!="function")throw new Error("chunkProcessor must be a function")}else throw new Error("Session ended: please call .begin() first");return this._chunkProcessor=e,this._chunkProcessorSize=0,this._chunkProcessorBuffer={raw:new ArrayBuffer(0),mono:new ArrayBuffer(0)},this.log("Recording ..."),await this._event("start"),this.recording=!0,!0}async clear(){if(!this.processor)throw new Error("Session ended: please call .begin() first");return await this._event("clear"),!0}async read(){if(!this.processor)throw new Error("Session ended: please call .begin() first");return this.log("Reading ..."),await this._event("read")}async save(e=!1){if(!this.processor)throw new Error("Session ended: please call .begin() first");if(!e&&this.recording)throw new Error("Currently recording: please call .pause() first, or call .save(true) to force");this.log("Exporting ...");let s=await this._event("export");return new d().pack(this.sampleRate,s.audio)}async end(){if(!this.processor)throw new Error("Session ended: please call .begin() first");let e=this.processor;this.log("Stopping ..."),await this._event("stop"),this.recording=!1,this.stream.getTracks().forEach(n=>n.stop()),this.log("Exporting ...");let t=await this._event("export",{},e);return this.processor.disconnect(),this.source.disconnect(),this.node.disconnect(),this.analyser.disconnect(),this.stream=null,this.processor=null,this.source=null,this.node=null,new d().pack(this.sampleRate,t.audio)}async quit(){return this.listenForDeviceChange(null),this.processor&&await this.end(),!0}};globalThis.WavRecorder=x;})();
